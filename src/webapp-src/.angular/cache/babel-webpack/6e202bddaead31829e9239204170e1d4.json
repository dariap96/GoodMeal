{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { baseUrl, backendUrl } from './configuration';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let RestapiService = /*#__PURE__*/(() => {\n  class RestapiService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    login(username, password) {\n      this.authHeader = new HttpHeaders({\n        Authorization: 'Basic ' + btoa(username + ':' + password)\n      });\n      let headers = this.authHeader;\n      return this.http.get(backendUrl, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getUserdata() {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + \"/userdata\", {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    addUser(user) {\n      return this.http.post(baseUrl + '/register', user);\n    }\n\n    getDishes() {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + \"/api/dish\", {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getMeals() {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + \"/api/meal\", {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getCuisines() {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + \"/api/cuisine\", {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getAllRecipes() {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/recipe', {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getFirstHundredRecipes() {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/recipe?filter[id][LE]=100', {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getFilteredRecipes(req) {\n      let headers = this.authHeader;\n      return this.http.get(req, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getRecipeById(id) {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/recipe/' + id, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getIngredientsByRecipeId(id) {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/ingredient?filter[ingredientsSet.recipe.id]=' + id, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getIngredientById(id) {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/ingredient/' + id, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getRecipeRatingById(id) {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/recipe_rating/' + id, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    addRating(rating) {\n      return this.http.post(baseUrl + '/recipe_rating/new', rating);\n    }\n\n    getUserInfo() {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/userinfo', {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getAllUsers() {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/user', {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    updatePassword(login, newPass) {\n      let headers = this.authHeader;\n      return this.http.put(baseUrl + '/update-password/' + login, newPass, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getUserSelections(login) {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/selection?filter[user.login]=' + login, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getSelectionById(id) {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/selection/' + id, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getRecipeSetForSelectionById(id) {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/api/selection/' + id + '/recipeSet', {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    addRecipeToSelectionById(selectionId, recipeId) {\n      let headers = this.authHeader;\n      return this.http.post(baseUrl + '/edit-selections/add-to-selection/' + selectionId, recipeId, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    addNewSelection(selectionName, login) {\n      let headers = this.authHeader;\n      return this.http.post(baseUrl + '/edit-selections/new-selection/' + selectionName, login, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    removeRecipeFromSelection(recipeId, selectionId) {\n      let headers = this.authHeader;\n      return this.http.post(baseUrl + '/edit-selections/remove-item/' + recipeId, selectionId, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    removeSelection(selectionId) {\n      let headers = this.authHeader;\n      return this.http.get(baseUrl + '/edit-selections/delete/' + selectionId, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n  }\n\n  RestapiService.ɵfac = function RestapiService_Factory(t) {\n    return new (t || RestapiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RestapiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestapiService,\n    factory: RestapiService.ɵfac,\n    providedIn: 'root'\n  });\n  return RestapiService;\n})();","map":null,"metadata":{},"sourceType":"module"}